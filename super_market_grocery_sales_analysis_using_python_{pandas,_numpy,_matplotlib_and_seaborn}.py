# -*- coding: utf-8 -*-
"""super market grocery sales analysis using Python {Pandas, Numpy, Matplotlib and Seaborn}.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Emeu4oU988Qkz9rqcSswuE05qAnUKxVt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

data = pd.read_csv('/content/Supermart Grocery Sales - Retail Analytics Dataset.csv')

print(data.head())

print(data.isnull().sum())

data.shape

data.dropna(inplace=True)

data.shape

data.drop_duplicates(inplace=True)

data.info()

data['Order Date'] = pd.to_datetime(data['Order Date'], errors='coerce')

data.info()

# applying groupby() function to
# group the data on Category.
da=data.groupby("Category")
da.first()

#we want to find the total sale by category
# firstly, we group by Category and get the total number of sales for each category
Sales_category=data.groupby("Category")["Sales"].sum()



#Extract month from the order date
#Extract month from the order date
data['month_no'] = data['Order Date'].dt.month
data['Month'] = pd.to_datetime(data['Order Date']).dt.strftime('%B')
data['year'] = data['Order Date'].dt.year

#check the data to view the added columns
data.head()

# Sum up sales by month
monthly_sales = data.groupby('Month')['Sales'].sum().reset_index()

# Sort the data by month
monthly_sales_sorted = monthly_sales.sort_values(by='Month')

# Create the line chart
plt.figure(figsize=(10, 6))
plt.plot(monthly_sales_sorted['Month'],
monthly_sales_sorted['Sales'], marker='o')
plt.title('Sales by Month')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.xticks(monthly_sales_sorted['Month'], ['Jan', 'Feb', 'Mar',
'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
plt.grid(True)
plt.show()

#we want to find the Yearly Sales
# we group by Year and get the total number of sales for each year
Yearly_Sales=data.groupby("year")["Sales"].sum()

# we create a pie chart with the sales by year
plt.pie(Yearly_Sales, labels=Yearly_Sales.index,
autopct='%1.1f%%')
plt.title('Sales by Year')
plt.show()

# Extract relevant columns
city_sales = data[['City', 'Sales']]

# Calculate total sales per city
total_sales = city_sales.groupby('City').sum()

# Sort the cities by sales
sorted_cities = total_sales.sort_values(by='Sales',
ascending=False)

# Select the top 5 cities
top_cities = sorted_cities.head(5)

# Plot the bar chart
plt.bar(top_cities.index, top_cities['Sales'])
plt.xlabel('City')
plt.ylabel('Sales')
plt.title('Top 5 Cities by Sales')
plt.xticks(rotation=45)
plt.show()